//
//  DefaultLayoutViewController.m
//  UILibraryDemo
//
//  Created by DJI on 16/4/2017.
//  Copyright Â© 2017 DJI. All rights reserved.
//

#import "DefaultLayoutViewController.h"
@import SocketIO;

@interface DefaultLayoutViewController ()<DJISDKManagerDelegate, DJIGimbalDelegate,DJIFlightControllerDelegate, DJIFlightAssistantDelegate>
@property DJIFlightController* flightController;

@property DJIGimbal* djiGimbal;
@property DJIGimbalAttitudeAction* gimbalAction;
@property DJIMissionControl* missionControl;

@property (atomic) DJIGimbalAttitude gimbalAtti;
@property (atomic) DJIVirtualStickFlightControlData controlData;
@property DJIGimbalRotation *rotationData;
@property DJIFlightAssistant *flightAssistant;

@property NSURL* url;
@property SocketManager* manager;
@property SocketIOClient* socket;
@property NSMutableDictionary* fPosiBuffStub;
@property NSMutableDictionary* socketSig;
@property int socketNum;

@property BOOL SDFlying;
@property BOOL autoSwitchStateBoo;
@property (atomic) float sliderValue;
@property BOOL goHomeF;
@property (weak, nonatomic) IBOutlet UILabel *label1;
@property (weak, nonatomic) IBOutlet UILabel *label2;
@property (weak, nonatomic) IBOutlet UILabel *label3;
@property (weak, nonatomic) IBOutlet UILabel *label4;
@property (weak, nonatomic) IBOutlet UILabel *label5;
@property (weak, nonatomic) IBOutlet UILabel *label6;
@property (weak, nonatomic) IBOutlet UILabel *label7;
@property (weak, nonatomic) IBOutlet UILabel *label8;
@property (weak, nonatomic) IBOutlet UILabel *label9;
@property (weak, nonatomic) IBOutlet UISlider *sliderBarForTes;
@property (weak, nonatomic) IBOutlet UIButton *setControllerModeButton;
@property (weak, nonatomic) IBOutlet UIButton *stubSDSoc;
@property int tes;
@property int* tes2;

@property float PContValue;
@property CLLocationCoordinate2D targetPosi;
@property (atomic) double targetAlt;
@property (atomic) double targetYaw;

@property CLLocationCoordinate2D SDPosiCurrent;
@property (atomic) double SDAltCurrent;
@property (atomic) double SDYawCurrent;

@property (atomic) double gimbalAngle;
/*
@property CLLocationCoordinate2D SDPosiPrevious;
@property double SDAltPrevious;
@property double SDYawPrevious;
 
@property (atomic) CLLocationCoordinate2D PDPosi;
@property (atomic) double PDAltCurrent;

@property (atomic) float lastLatError;
@property (atomic) float lastLonError;
@property (atomic) float latDiffError;
@property (atomic) float lonDiffError;
*/

- (IBAction)sliderBarForGimbal:(UISlider *)sender;
- (IBAction)autoOperateSwitch:(UISwitch *)sender;
- (IBAction)showInfoLabel:(UISwitch *)sender;
- (IBAction)setControllerMode:(UIButton *)sender;
- (IBAction)stubPD:(id)sender;

@end

@implementation DefaultLayoutViewController


- (void)viewDidLoad
{
    [super viewDidLoad];
    //Please enter your App Key in the info.plist file.
    [DJISDKManager registerAppWithDelegate:self];
    [NSTimer scheduledTimerWithTimeInterval:0.03f target:self selector:@selector(Vmethod:) userInfo:nil repeats:YES];
    [NSTimer scheduledTimerWithTimeInterval:0.5f target:self selector:@selector(Tmethod:) userInfo:nil repeats:YES];
    self.url = [[NSURL alloc] initWithString:@"http://192.168.100.154:5000"];
    self.manager = [[SocketManager alloc] initWithSocketURL:self.url config:@{@"log": @YES, @"compress": @YES}];
    self.socket = self.manager.defaultSocket;

    [self.socket on:@"connect" callback:^(NSArray* data, SocketAckEmitter* ack) {
        NSLog(@"socket connected");
    }];
    self.targetAlt = 0;
    self.targetYaw = 0;
    self.targetPosi= CLLocationCoordinate2DMake(0, 0);
    self.gimbalAngle = 0;
    self.socketNum = 0;
    /*
    [self.socket on:@"v2Posi" callback:^(NSArray * data, SocketAckEmitter * ack) {
        self.targetPosi= CLLocationCoordinate2DMake([[data[0] objectForKey:@"lat"] doubleValue], [[data[0] objectForKey:@"lon"] doubleValue]);
        self.targetAlt = [[data[0] objectForKey:@"alt"] doubleValue];
    }];
    
    [self.socket on:@"v2Posture" callback:^(NSArray * data, SocketAckEmitter * ack) {
        float v1Lat;
        float v1Lon;
        v1Lat = [[data[0] objectForKey:@"v1Lat"] doubleValue];
        v1Lon = [[data[0] objectForKey:@"v1Lon"] doubleValue];
        if((v1Lon - self.SDPosiCurrent.longitude) == 0){
            self.targetYaw = atan((v1Lat - self.SDPosiCurrent.latitude)/(0.00000001));
        }else{
            self.targetYaw = atan((v1Lat - self.SDPosiCurrent.latitude)/(v1Lon - self.SDPosiCurrent.longitude));
        }
        self.distanceBtDrone = [[data[0] objectForKey:@"dist"] doubleValue];
    }];
    [self.socket on:@"PDinfo" callback:^(NSArray * data, SocketAckEmitter * ack) {
        self.PDAltCurrent = [[data[0] objectForKey:@"alt"] doubleValue];
        NSLog(@"distace !! -- %lf", self.distanceBtDrone);
    }];
     */
    [self.socket connect];
    self.fPosiBuffStub = [NSMutableDictionary dictionary];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:38.2466255] forKey:@"lat"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:140.8710816] forKey:@"lon"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:1.0] forKey:@"alt"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"yaw"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"pitch"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"roll"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"velX"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"velY"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"velZ"];
    self.socketSig = [NSMutableDictionary dictionary];
    [self.socketSig setObject:[NSNumber numberWithInt:self.socketNum] forKey:@"SDSocketNum"];
}

- (void)showAlertViewWithMessage:(NSString *)message
{
    dispatch_async(dispatch_get_main_queue(), ^{
        UIAlertController* alertViewController = [UIAlertController alertControllerWithTitle:nil message:message preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction* okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil];
        [alertViewController addAction:okAction];
        UIViewController *rootViewController = [[UIApplication sharedApplication] keyWindow].rootViewController;
        [rootViewController presentViewController:alertViewController animated:YES completion:nil];
    });
}

#pragma mark DJISDKManager Delegate Methods
- (void)appRegisteredWithError:(NSError *)error
{
    if (!error) {
        [self showAlertViewWithMessage:@"Registration Success"];
        [DJISDKManager startConnectionToProduct];
    }else
    {
        [self showAlertViewWithMessage:[NSString stringWithFormat:@"Registration Error:%@", error]];
    }
}

- (void)productConnected:(DJIBaseProduct *)product
{
    //If this demo is used in China, it's required to login to your DJI account to activate the application. Also you need to use DJI Go app to bind the aircraft to your DJI account. For more details, please check this demo's tutorial.
    [[DJISDKManager userAccountManager] logIntoDJIUserAccountWithAuthorizationRequired:NO withCompletion:^(DJIUserAccountState state, NSError * _Nullable error) {
        if (error) {
            NSLog(@"Login failed: %@", error.description);
        }
    }];
    self.djiGimbal = ((DJIAircraft*)[DJISDKManager product]).gimbal;
    self.djiGimbal.delegate = self;
    self.flightController = [self fetchFlightController];
    self.flightController.delegate = self;
    self.flightAssistant = self.flightController.flightAssistant;
    self.flightAssistant.delegate = self;
    [self.flightAssistant setCollisionAvoidanceEnabled:YES withCompletion:^(NSError * _Nullable error) {
    }];
    // Max speed of each direction is 15 m/s. and min speed is -15 m/s
    [self initControllerMode];
}

- (DJIFlightController*) fetchFlightController {
    if (![DJISDKManager product]) {
        return nil;
    }
    if ([[DJISDKManager product] isKindOfClass:[DJIAircraft class]]) {
        return ((DJIAircraft*)[DJISDKManager product]).flightController;
    }
    return nil;
}

- (void) flightController:(DJIFlightController *)fc didUpdateState:(DJIFlightControllerState *)state{
    self.SDFlying = state.isFlying;
    self.SDPosiCurrent = CLLocationCoordinate2DMake(state.aircraftLocation.coordinate.latitude, state.aircraftLocation.coordinate.longitude);
    self.SDAltCurrent = state.altitude;
    if(state.flightMode == DJIFlightModeGoHome){
        self.goHomeF = true;
    }else{
        self.goHomeF = false;
    }
}


- (void)Vmethod:(NSTimer *)timer
{
    // [self.socket emit:@"v1params" with:[NSArray arrayWithObject:self.fPosiBuffStub]];
    if(self.autoSwitchStateBoo){
        self.label1.text = @"on";
        [self culcuControlData];
        [self.flightController sendVirtualStickFlightControlData:self.controlData withCompletion:^(NSError * _Nullable error) {
        }];
        [self culcuGimbalRotation];
        [self.djiGimbal rotateWithRotation:self.rotationData completion:^(NSError * _Nullable error) {
        }];
        self.label9.text = [NSString stringWithFormat:@"targetAlt: %lf", self.targetAlt];
    }else{
        self.label1.text = @"off";
    }
    
    /*
    self.label5.text = [NSString stringWithFormat:@"verticalThrottle: %lf", self.controlData.verticalThrottle];
    self.label6.text = [NSString stringWithFormat:@"control Yaw: %lf", self.controlData.yaw];
    self.label7.text = [NSString stringWithFormat:@"targetLat: %lf", self.targetPosi.latitude];
    self.label8.text = [NSString stringWithFormat:@"targetLon: %lf", self.targetPosi.longitude];
     */
}
     

-(void) gimbal:(DJIGimbal *)gimbal didUpdateState:(DJIGimbalState *)state{
//    self.label6.text = [NSString stringWithFormat:@"%f", state.attitudeInDegrees.pitch];
}

-(void) culcuGimbalRotation{
     // self.gimbalAngle = -(atan((self.SDAltCurrent - self.PDAltCurrent )/ self.distanceBtDrone)* 0.5 * M_1_PI * 360);
     self.rotationData = [DJIGimbalRotation gimbalRotationWithPitchValue:[NSNumber numberWithDouble:self.gimbalAngle] rollValue:0 yawValue:0 time:0.2 mode:DJIGimbalRotationModeAbsoluteAngle];
}

- (IBAction)sliderBarForGimbal:(UISlider *)sender {
    self.sliderValue = (sender.value);
}

- (void)culcuControlData{
    DJIVirtualStickFlightControlData data;
    /*
    float latError;
    float lonError;
    float diffLatError;
    float diffLonError;
    latError = (float)((self.targetPosi.latitude - self.SDPosiCurrent.latitude)*100000) * self.PContValue;
    lonError = (float)((self.targetPosi.longitude - self.SDPosiCurrent.longitude)*100000) * self.PContValue;
    diffLatError = (latError - self.lastLatError) * 3;
    diffLonError = (lonError - self.lastLonError) * 3;

    data.roll = latError + diffLatError;
    data.pitch = lonError + diffLonError;
    if(data.roll >= 15){
        data.roll = 15;
    }else if(data.roll <= -15){
        data.roll = -15;
    }
    if(data.pitch >= 15){
        data.pitch = 15;
    }else if(data.pitch <= -15){
        data.pitch = -15;
    }
    */
    data.verticalThrottle = self.targetAlt;
    data.yaw = self.targetYaw;
    data.pitch = 0;
    data.roll = 0;
    self.controlData = data;
    /*
    self.label1.text = [NSString stringWithFormat:@"pitch value: %f", self.controlData.pitch];
    self.label2.text = [NSString stringWithFormat:@"roll value: %f", self.controlData.roll];
    self.label3.text = [NSString stringWithFormat:@"SDPosi lat: %lf", self.SDPosiCurrent.latitude];
    self.label4.text = [NSString stringWithFormat:@"SDPosi lon: %lf", self.SDPosiCurrent.longitude];
     */
}

- (IBAction)autoOperateSwitch:(UISwitch *)sender {
    self.autoSwitchStateBoo = sender.isOn;
    if(self.autoSwitchStateBoo == TRUE && self.flightController){
        [self.flightController setFlightOrientationMode:DJIFlightOrientationModeAircraftHeading withCompletion:^(NSError * _Nullable error) {
        }];
        [self.flightController setVirtualStickModeEnabled:YES withCompletion:^(NSError * _Nullable error) {
        }];
        [self.flightController getVirtualStickModeEnabledWithCompletion:^(BOOL enabled, NSError * _Nullable error) {
        }];
    }
    if(self.autoSwitchStateBoo == FALSE && self.flightController){
        [self.flightController setFlightOrientationMode:DJIFlightOrientationModeAircraftHeading withCompletion:^(NSError * _Nullable error) {
        }];
        [self.flightController setVirtualStickModeEnabled:NO withCompletion:^(NSError * _Nullable error) {
        }];
        [self.flightController getVirtualStickModeEnabledWithCompletion:^(BOOL enabled, NSError * _Nullable error) {
        }];
    }
}

- (IBAction)showInfoLabel:(UISwitch *)sender {
    if(sender.isOn){
        self.label1.hidden = false;
        self.label2.hidden = false;
        self.label3.hidden = false;
        self.label4.hidden = false;
        self.label5.hidden = false;
        self.label6.hidden = false;
        self.label7.hidden = false;
        self.label8.hidden = false;
        self.label9.hidden = false;
        self.sliderBarForTes.hidden = false;
        self.setControllerModeButton.hidden = false;
    }else{
        self.label1.hidden = true;
        self.label2.hidden = true;
        self.label3.hidden = true;
        self.label4.hidden = true;
        self.label5.hidden = true;
        self.label6.hidden = true;
        self.label7.hidden = true;
        self.label8.hidden = true;
        self.label9.hidden = true;
        self.sliderBarForTes.hidden = true;
        self.setControllerModeButton.hidden = true;
    }
}

- (void) initControllerMode{
    self.flightController.rollPitchControlMode = DJIVirtualStickRollPitchControlModeVelocity;
    self.flightController.yawControlMode = DJIVirtualStickYawControlModeAngle;
    self.flightController.verticalControlMode = DJIVirtualStickVerticalControlModePosition;
    self.flightController.rollPitchCoordinateSystem = DJIVirtualStickFlightCoordinateSystemGround;
    ((DUXFPVViewController*)self.contentViewController).fpvView.showCameraDisplayName = false;
}

- (IBAction)setControllerMode:(UIButton *)sender {
    self.flightController.rollPitchControlMode = DJIVirtualStickRollPitchControlModeVelocity;
    self.flightController.yawControlMode = DJIVirtualStickYawControlModeAngle;
    self.flightController.verticalControlMode = DJIVirtualStickVerticalControlModePosition;
    self.flightController.rollPitchCoordinateSystem = DJIVirtualStickFlightCoordinateSystemGround;
    ((DUXFPVViewController*)self.contentViewController).fpvView.showCameraDisplayName = false;
}

- (IBAction)stubPD:(id)sender {
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:38.2466255] forKey:@"lat"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:140.8710816] forKey:@"lon"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:1.0] forKey:@"alt"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0] forKey:@"yaw"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"pitch"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"roll"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"velX"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"velY"];
    [self.fPosiBuffStub setObject:[NSNumber numberWithDouble:0.0] forKey:@"velZ"];
    [self.socket emit:@"v1params" with:[NSArray arrayWithObject:self.fPosiBuffStub]];
}

- (void)flightAssistant:(DJIFlightAssistant *)assistant
didUpdateVisionDetectionState:(DJIVisionDetectionState *)state{
    //state.detectionSectors[0].obstacleDistanceInMeters;
}

- (void)Tmethod:(NSTimer *)timer{
    self.socketNum += 1;
    [self.socketSig setObject:[NSNumber numberWithFloat:self.socketNum] forKey:@"SDSocketNum"];
    [self.socket emit:@"sdSocket" with:[NSArray arrayWithObject:self.socketSig]];
}
@end

